{"version":3,"file":"static/webpack/static/development/pages/createpost.js.3e78367196791700200b.hot-update.js","sources":["webpack:///./components/Posts/create.js"],"sourcesContent":["import React, { Component } from 'react';\nimport { Mutation } from 'react-apollo';\nimport Router from 'next/router';\nimport gql from 'graphql-tag';\nimport Form from '../styled/Form';\nimport Error from '../ErrorMessage';\n// import { ALL_ITEMS_QUERY } from './Items';\n\nconst CREATE_ITEM_MUTATION = gql`\n    mutation CREATE_ITEM_MUTATION(\n        $title: String!\n        $description: String!\n        $image: String\n        $largeImage: String\n        $tags: [String!]!\n    ) {\n        createPost(\n            title: $title\n            description: $description\n            image: $image\n            largeImage: $largeImage\n            tags: $tags\n        ) {\n            id\n        }\n    }\n`;\n\nclass CreateItem extends Component {\n\n    state = {\n        title: '',\n        description: '',\n        image: '',\n        largeImage: '',\n        content: '',\n        tags: []\n    }\n\n    handleChange = (e) => {\n        const { name, type, value } = e.target;\n        const val = type === 'number' ? parseFloat(value) : value;\n        // if(name === 'tags') {\n        //     this.setState({tags: [...this.state.tags, ...value.split('#')]});\n        //     return\n        // }\n\n        this.setState({ [name]: val })\n    }\n    uploadFile = async e => {\n\n        console.log(e.target.files);\n\n\n        let files = e.target.files;\n\n        if (e.target.files.length > 1) {\n\n            for (let i = 0; i < e.target.files.length; i++) {\n                files = files;\n                async (files) => {\n                    console.log('Uploading file #' + i);\n                    // const files = e.target.files;\n                    const data = new FormData();\n                    data.append('file', files[i]);\n                    data.append('upload_preset', 'kpblog');\n\n                    const res = await fetch\n                        ('https://api.cloudinary.com/v1_1/kevinpena/image/upload', {\n                            method: 'POST',\n                            body: data\n                        });\n\n                    const file = await res.json();\n                    this.setState({\n                        image: file.secure_url,\n                        largeImage: file.eager[0].secure_url\n                    })\n                }\n            }\n        }\n        else {\n            console.log('Uploading');\n            console.log(e);\n            const files = e.target.files;\n            const data = new FormData();\n            data.append('file', files[0]);\n            data.append('upload_preset', 'kpblog');\n\n            const res = await fetch\n                ('https://api.cloudinary.com/v1_1/kevinpena/image/upload', {\n                    method: 'POST',\n                    body: data\n                });\n\n            const file = await res.json();\n            this.setState({\n                image: file.secure_url,\n                largeImage: file.eager[0].secure_url\n            })\n        }\n\n\n    }\n\n    render() {\n        return (\n            <Mutation mutation={CREATE_ITEM_MUTATION}>\n                {(createPost, { loading, error }) => (\n                    <Form onSubmit={async e => {\n                        e.preventDefault();\n                        let words = await this.state.tags.split('#');\n                        await words.shift();\n                        words = await words.slice();\n                        words = await words.map(word => word.toLowerCase());\n                        words = await words.map(word => word.trim());\n                        const res = await createPost({\n                            variables: {\n                                title: this.state.title,\n                                description: this.state.description,\n                                image: this.state.image,\n                                largeImage: this.state.largeImage,\n                                content: this.state.content,\n                                tags: words\n                            }\n                        });\n                        Router.push({\n                            pathname: '/post',\n                            query: { id: res.data.createPost.id }\n                        })\n                    }}>\n                        <Error error={error} />\n                        <fieldset disabled={loading} aria-busy={loading}>\n                            <label htmlFor=\"File\">\n                                Image\n                    <input\n                                    type=\"file\"\n                                    id=\"file\"\n                                    name=\"file\"\n                                    multiple\n                                    placeholder=\"Upload an image\"\n                                    // value={this.state.image}\n                                    onChange={this.uploadFile}\n                                    required\n                                />\n                                {this.state.image && <img style={{ width: '200px' }} src={this.state.image} alt=\"Upload Preview\" />}\n                            </label>\n\n                            <label htmlFor=\"title\">\n                                Title\n                    <input\n                                    type=\"text\"\n                                    id=\"title\"\n                                    name=\"title\"\n                                    placeholder=\"Title\"\n                                    value={this.state.title}\n                                    onChange={this.handleChange}\n                                    required />\n                            </label>\n                            <label htmlFor=\"description\">\n                                Description\n                    <textarea\n                                    id=\"description\"\n                                    name=\"description\"\n                                    placeholder=\"Enter a description\"\n                                    value={this.state.description}\n                                    onChange={this.handleChange}\n                                    required />\n                            </label>\n                            <label htmlFor=\"content\">\n                                Content\n                    <textarea\n                                    id=\"content\"\n                                    name=\"content\"\n                                    placeholder=\"Content\"\n                                    value={this.state.content}\n                                    onChange={this.handleChange}\n                                />\n                            </label>\n                            <label htmlFor=\"tags\">\n                                Tags\n                    <input\n                                    type=\"text\"\n                                    id=\"tags\"\n                                    name=\"tags\"\n                                    placeholder=\"Tag\"\n                                    value={this.state.tags}\n                                    onChange={this.handleChange}\n                                />\n                            </label>\n                            <button type=\"submit\">Submit</button>\n                        </fieldset>\n                    </Form>\n                )}\n            </Mutation>\n\n        )\n    }\n}\n\nexport default CreateItem;\nexport { CREATE_ITEM_MUTATION };\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAmBA;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAEA;AAGA;AACA;AANA;AAAA;AAAA;AAAA;AACA;AADA;AAUA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;AASA;AACA;AAFA;AACA;AATA;AAOA;AAPA;AAAA;AACA;AADA;AAaA;AACA;AAAA;AACA;AACA;AAFA;AACA;AAfA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAXA;AACA;AAQA;AAAA;AAqBA;AACA;AA/BA;AAAA;AACA;AADA;AAiCA;AACA;AACA;AACA;AACA;AACA;AAtCA;AAAA;AA0CA;AACA;AAFA;AACA;AA1CA;AAwCA;AAxCA;AAAA;AACA;AADA;AA8CA;AACA;AAAA;AACA;AACA;AAFA;AACA;AAhDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;AAuDA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAEA;AAFA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAIA;AAJA;AAAA;AAKA;AAAA;AACA;AANA;AAKA;AALA;AAAA;AAMA;AAAA;AACA;AAPA;AAMA;AANA;AAAA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AADA;AACA;AARA;AAOA;AAUA;AACA;AACA;AAAA;AAAA;AAFA;AACA;AAlBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAslFA;AAyFA;;;;AAzKA;AACA;AA2KA;;;;;A","sourceRoot":""}